from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes,MessageHandler, filters, ConversationHandler
from model_inference import predict_salary, predict_salary_response, predict_grade
from telegram.constants import ParseMode
from market_analytics import top_5_skills, compare_vacancy_to_market, top_vacancies, get_area_id_by_city, promotion_skills
import pandas as pd
from dotenv import load_dotenv
import os


SALARY_INPUT = 1

SKILLS_INPUT = 2

ANALYZE_INPUT = 3

TOPJOBS_INPUT = 4

GRADE_INPUT = 5

MAIN_MENU_TEXT = (
    "–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏:\n"
    "/salary ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
    "/skills ‚Äî —Ç–æ–ø-5 –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏\n"
    "/analyze ‚Äî —Å—Ä–∞–≤–Ω–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é —Å —Ä—ã–Ω–∫–æ–º\n"
    "/top ‚Äî —Ç–æ–ø-–≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º\n"
    "/grade ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥—Ä–µ–π–¥\n"
    "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞"
)

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv(dotenv_path="/content/drive/MyDrive/hh-hr-bot/.env")

# –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    await update.message.reply_photo(
        photo=open('src/bot/baner.jpg', 'rb'),  # –£–∫–∞–∂–∏ –∏–º—è —Ñ–∞–π–ª–∞-–±–∞–Ω–Ω–µ—Ä–∞ (jpg/png)
        caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR-–±–æ—Ç!\n\n–ú–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É, –≥—Ä–µ–π–¥, –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –Ω–∞–≤—ã–∫–æ–≤ –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é —Å —Ä—ã–Ω–∫–æ–º.\n\n"
        "üìå–ö–æ–º–∞–Ω–¥—ã:\n"
        "/salary ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã\n"
        "/grade ‚Äî –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–µ–π–¥–∞\n"
        "/skills ‚Äî —Ç–æ–ø-5 –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤\n"
        "/analyze ‚Äî —Å—Ä–∞–≤–Ω–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é —Å —Ä—ã–Ω–∫–æ–º\n"
        "/nextskills ‚Äî –ù–∞–≤—ã–∫–∏ –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞\n"
        "/top ‚Äî –¢–û–ü –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ä—ã–Ω–∫–æ–º\n"
        "\n–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /help"
    )
    #await update.message.reply_text(
    #    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø HR-–±–æ—Ç. –ú–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É, –≥—Ä–µ–π–¥, –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –Ω–∞–≤—ã–∫–æ–≤ –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é —Å —Ä—ã–Ω–∫–æ–º.\n"
    #    "–ö–æ–º–∞–Ω–¥—ã:\n"
    #    "/salary ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã\n"
    #    "/grade ‚Äî –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–µ–π–¥–∞\n"
    ##    "/skills ‚Äî —Ç–æ–ø-5 –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤\n"
     #   "/analyze ‚Äî —Å—Ä–∞–≤–Ω–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é —Å —Ä—ã–Ω–∫–æ–º\n"
    #    "/nextskills ‚Äî –ù–∞–≤—ã–∫–∏ –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞\n"
    ##    "/top ‚Äî –¢–û–ü –≤–∞–∫–∞–Ω—Å–∏–π —Å —Ä—ã–Ω–∫–æ–º\n"
     #   "\n–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /help"
    #)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SALARY_DESC, SALARY_CITY, SALARY_SKILLS, SALARY_GRADE = range(4)

async def salary_start(update, context):
    await update.message.reply_text(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤):"
    )
    return SALARY_DESC

async def salary_get_city(update, context):
    context.user_data['description'] = update.message.text.strip()
    await update.message.reply_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è?")
    return SALARY_CITY

async def salary_get_skills(update, context):
    context.user_data['city'] = update.message.text.strip()
    await update.message.reply_text(
        "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python, Django, SQL, –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å):"
    )
    return SALARY_SKILLS

async def salary_get_grade(update, context):
    context.user_data['skills'] = [s.strip() for s in update.message.text.split(',')]
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞–∫–∞–Ω—Å–∏–∏ (junior, middle, senior, lead).\n"
        "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ‚Äò-‚Äô –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º."
    )
    return SALARY_GRADE

async def salary_finish(update, context):
    grade_input = update.message.text.strip().lower()
    grade = grade_input if grade_input in ['junior', 'middle', 'senior', 'lead'] else None
    context.user_data['grade'] = grade

    # --- –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏ ---
    description = context.user_data['description']
    city = context.user_data['city']
    skills = context.user_data['skills']
    grade = context.user_data['grade']

    # –ù–∞–π—Ç–∏ area_id –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞ (—Ç–≤–æ—è —Ç–∞–±–ª–∏—Ü–∞ area)

    area_id = get_area_id_by_city(city) or 0


    # –ö–æ–¥–∏—Ä—É–µ–º –≥—Ä–µ–π–¥
    exp_junior = int(grade == 'junior') if grade else 0
    exp_middle = int(grade == 'middle') if grade else 0
    exp_senior = int(grade == 'senior') if grade else 0
    exp_lead = int(grade == 'lead') if grade else 0

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    desc_len = len(description)
    desc_words = len(description.split())
    title_len = min(desc_len, 40)
    num_skills = len(skills)

    features = {
        'area_id': area_id,
        'desc_len': desc_len,
        'desc_words': desc_words,
        'title_len': title_len,
        'num_skills': num_skills,
        'exp_junior': exp_junior,
        'exp_middle': exp_middle,
        'exp_senior': exp_senior,
        'exp_lead': exp_lead,
        'description': description,
        'title': description[:40],
        'salary_currency': "RUR"
    }
    salary = predict_salary(features)
    msg = (
        f"<b>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏:</b> {int(salary):,}".replace(',', ' ') +f" {features['salary_currency']}\n\n"
        f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ì–æ—Ä–æ–¥: {city} (area_id: {area_id})\n"
        f"–ù–∞–≤—ã–∫–∏: {', '.join(skills)}\n"
        f"–£—Ä–æ–≤–µ–Ω—å: {grade if grade else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
    )
    await update.message.reply_text(msg, parse_mode="HTML")
    await update.message.reply_text(MAIN_MENU_TEXT)
    return ConversationHandler.END

GRADE_DESC, GRADE_CITY, GRADE_SKILLS = range(3)

async def grade_start(update, context):
    await update.message.reply_text(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –∏–ª–∏ —Å–≤–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤):"
    )
    return GRADE_DESC

async def grade_get_city(update, context):
    context.user_data['description'] = update.message.text.strip()
    await update.message.reply_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è (–∏–ª–∏ –≥–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ)?")
    return GRADE_CITY

async def grade_get_skills(update, context):
    context.user_data['city'] = update.message.text.strip()
    await update.message.reply_text(
        "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python, Django, SQL, –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å):"
    )
    return GRADE_SKILLS

async def grade_finish(update, context):
    description = context.user_data['description']
    city = context.user_data['city']
    skills = [s.strip() for s in update.message.text.split(',')]

    area_id = get_area_id_by_city(city) or 0
    desc_len = len(description)
    desc_words = len(description.split())
    title = description[:40]
    title_len = len(title)
    num_skills = len(skills)

    # exp_* –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤—Å–µ –ø–æ 0 ‚Äî –º–æ–¥–µ–ª—å —Å–∞–º–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥—Ä–µ–π–¥
    features = {
        'area_id': area_id,
        'desc_len': desc_len,
        'desc_words': desc_words,
        'title_len': title_len,
        'num_skills': num_skills,
        'exp_junior': 0,
        'exp_middle': 0,
        'exp_senior': 0,
        'exp_lead': 0,
        'description': description,
        'title': title,
        'salary_currency': "RUR"
    }

    grade_code = predict_grade(features)
    grade_map = {0: "junior", 1: "middle", 2: "senior", 3: "lead"}
    grade_label = grade_map.get(grade_code, "unknown")

    msg = (
        f"<b>–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –≥—Ä–µ–π–¥:</b> <b>{grade_label.title()}</b> ({grade_code})\n\n"
        f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ì–æ—Ä–æ–¥: {city} (area_id: {area_id})\n"
        f"–ù–∞–≤—ã–∫–∏: {', '.join(skills)}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description[:40]}..."
    )
    await update.message.reply_text(msg, parse_mode="HTML")
    await update.message.reply_text(MAIN_MENU_TEXT)
    return ConversationHandler.END

SKILLS_TITLE, SKILLS_CITY, SKILLS_GRADE = range(3)

async def skills_start(update, context):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–ª–∏ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö, –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º):"
    )
    return SKILLS_TITLE

async def skills_get_city(update, context):
    context.user_data['title'] = update.message.text.strip()
    await update.message.reply_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ä—ã–Ω–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π?")
    return SKILLS_CITY

async def skills_get_grade(update, context):
    context.user_data['city'] = update.message.text.strip()
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å (junior, middle, senior, lead). –ï—Å–ª–∏ –Ω–µ –≤–∞–∂–µ–Ω ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ‚Äò-‚Äô –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º."
    )
    return SKILLS_GRADE

async def skills_finish(update, context):
    grade_input = update.message.text.strip().lower()
    title = context.user_data['title']
    city = context.user_data['city']
    grade = grade_input if grade_input in ['junior', 'middle', 'senior', 'lead'] else None

    # –ü–æ–ª—É—á–∏—Ç—å area_id
    area_id = get_area_id_by_city(city) or 0

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≥—Ä–µ–π–¥ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è top_5_skills (int –∏–ª–∏ str)
    grade_map = {'junior': 0, 'middle': 1, 'senior': 2, 'lead': 3}
    grade_code = grade_map.get(grade, None) if grade else None

    # –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø-5 –Ω–∞–≤—ã–∫–æ–≤
    df = top_5_skills(title=title, area_id=area_id, grade=grade_code)

    if df.empty:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
        return ConversationHandler.END

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
    msg = f"<b>–¢–æ–ø-5 –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b>\n–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {title}\n–ì–æ—Ä–æ–¥: {city}\n"
    if grade:
        msg += f"–£—Ä–æ–≤–µ–Ω—å: {grade}\n"
    msg += "\n"
    for i, row in df.iterrows():
        salary = f"{int(row['mean_salary']):,}".replace(',', ' ') if row['mean_salary'] else "-"
        msg += (
            f"{i+1}. <b>{row['skill_name']}</b> ‚Äî {row['frequency']} –≤–∞–∫–∞–Ω—Å–∏–π, "
            f"—Å—Ä. –∑–∞—Ä–ø–ª–∞—Ç–∞: {salary} —Ä—É–±.\n"
        )
    await update.message.reply_text(msg, parse_mode="HTML")
    await update.message.reply_text(MAIN_MENU_TEXT)
    return ConversationHandler.END

NEXTSKILLS_TITLE, NEXTSKILLS_CITY, NEXTSKILLS_FROM, NEXTSKILLS_TO = range(4)

async def nextskills_start(update, context):
    await update.message.reply_text(
        "–î–ª—è –∫–∞–∫–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞? (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫)"
    )
    return NEXTSKILLS_TITLE

async def nextskills_get_city(update, context):
    context.user_data['title'] = update.message.text.strip()
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω (–∏–ª–∏ ‚Äò-‚Äô –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ):")
    return NEXTSKILLS_CITY

async def nextskills_get_from(update, context):
    context.user_data['city'] = update.message.text.strip()
    await update.message.reply_text(
        "–° –∫–∞–∫–æ–≥–æ –≥—Ä–µ–π–¥–∞ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å (junior, middle, senior)?"
    )
    return NEXTSKILLS_FROM

async def nextskills_get_to(update, context):
    context.user_data['grade_from'] = update.message.text.strip().lower()
    await update.message.reply_text(
        "–ù–∞ –∫–∞–∫–æ–π –≥—Ä–µ–π–¥ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ (middle, senior, lead)?"
    )
    return NEXTSKILLS_TO

async def nextskills_finish(update, context):
    grade_to = update.message.text.strip().lower()
    title = context.user_data['title']
    city = context.user_data['city']
    grade_from = context.user_data['grade_from']

    # –ü–æ–ª—É—á–∏—Ç—å area_id
    area_id = get_area_id_by_city(city) if city and city != '-' else None

    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    result = promotion_skills(title=title, area_id=area_id, grade_from=grade_from, grade_to=grade_to, top_n=7)
    if not result:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –º–∞–ª–æ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    else:
        msg = (
            f"–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å <b>{grade_from}</b> –Ω–∞ <b>{grade_to}</b> –ø–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ <b>{title}</b> "
            f"–Ω–∞ —Ä—ã–Ω–∫–µ —á–∞—â–µ –≤—Å–µ–≥–æ –≤—ã–¥–µ–ª—è—é—Ç –Ω–∞–≤—ã–∫–∏:\n"
        )
        for i, (skill, delta, freq) in enumerate(result, 1):
            msg += f"{i}. <b>{skill}</b> (+{delta} –≤–∞–∫–∞–Ω—Å–∏–π, –≤—Å–µ–≥–æ {freq})\n"
        await update.message.reply_text(msg, parse_mode="HTML")

    await update.message.reply_text(MAIN_MENU_TEXT)
    return ConversationHandler.END

ANALYZE_DESC, ANALYZE_CITY, ANALYZE_SKILLS, ANALYZE_SALARY = range(4)

async def analyze_start(update, context):
    await update.message.reply_text(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –∏–ª–∏ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤):"
    )
    return ANALYZE_DESC

async def analyze_get_city(update, context):
    context.user_data['description'] = update.message.text.strip()
    await update.message.reply_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è (–∏–ª–∏ –≥–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ)?")
    return ANALYZE_CITY

async def analyze_get_skills(update, context):
    context.user_data['city'] = update.message.text.strip()
    await update.message.reply_text(
        "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python, Django, SQL, –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å):"
    )
    return ANALYZE_SKILLS

#async def analyze_get_grade(update, context):
#    context.user_data['skills'] = [s.strip() for s in update.message.text.split(',')]
#    await update.message.reply_text(
#        "–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å (junior, middle, senior, lead). –ï—Å–ª–∏ –Ω–µ –≤–∞–∂–µ–Ω ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ‚Äò-‚Äô –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º."
#    )
 #   return SKILLS_GRADE    

async def analyze_get_salary(update, context):
    context.user_data['skills'] = [s.strip() for s in update.message.text.split(',')]
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –∑–∞—Ä–ø–ª–∞—Ç—É (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å —Å —Ä—ã–Ω–∫–æ–º). –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ‚Äò-‚Äô –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º."
    )
    return ANALYZE_SALARY

async def analyze_finish(update, context):
    description = context.user_data['description']
    city = context.user_data['city']
    skills = context.user_data['skills']
    salary_input = update.message.text.strip()
    try:
        salary_rub = int(salary_input.replace(' ', '').replace('—Ä—É–±', '')) if salary_input and salary_input != '-' else None
    except ValueError:
        salary_rub = None

    area_id = get_area_id_by_city(city) or 0

    vac = {
        'title': description[:40],          # –¥–ª—è title
        'area_id': area_id,
        'experience_hh': None,              # –µ—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —à–∞–≥ —Å –æ–ø—ã—Ç–æ–º
        'skills': skills,
        'salary_rub': salary_rub
    }

    # –ê–Ω–∞–ª–∏–∑
    result = compare_vacancy_to_market(vac)
    await update.message.reply_text(result)
    await update.message.reply_text(MAIN_MENU_TEXT)
    return ConversationHandler.END

TOP_CITY, TOP_TITLE, TOP_GRADE = range(3)

async def top_start(update, context):
    await update.message.reply_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –≤–∞–∫–∞–Ω—Å–∏–∏?")
    return TOP_CITY

async def top_get_title(update, context):
    context.user_data['city'] = update.message.text.strip()
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: Python, –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º):"
    )
    return TOP_TITLE

async def top_get_grade(update, context):
    context.user_data['title'] = update.message.text.strip()
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å (junior, middle, senior, lead), –µ—Å–ª–∏ –≤–∞–∂–Ω–æ. –ï—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ‚Äò-‚Äô –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º."
    )
    return TOP_GRADE

async def top_finish(update, context):
    city = context.user_data['city']
    title = context.user_data['title']
    grade_input = update.message.text.strip().lower()

    area_id = get_area_id_by_city(city) or 0

    grade_map = {'junior': 0, 'middle': 1, 'senior': 2, 'lead': 3}
    grade = grade_map.get(grade_input, None) if grade_input and grade_input != '-' else None

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-–≤–∞–∫–∞–Ω—Å–∏–π (—Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å DataFrame/—Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π)
    df = top_vacancies(area_name=city, keyword=title, grade=grade)

    if df.empty:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.")
        await update.message.reply_text(MAIN_MENU_TEXT)
        return ConversationHandler.END

    msg = f"<b>–¢–æ–ø-5 –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:</b>\n–ì–æ—Ä–æ–¥: {city}\n–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {title}\n"
    if grade_input and grade_input != '-':
        msg += f"–ì—Ä–µ–π–¥: {grade_input}\n"
    msg += "\n"
    for i, row in df.iterrows():
        salary = f"{int(row['salary_rub']):,}".replace(',', ' ') if row['salary_rub'] else "-"
        msg += (
            f"{i+1}. <b>{row['title']}</b> ({row['employer']})\n"
            f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {salary} —Ä—É–±.\n"
            f"–ì–æ—Ä–æ–¥: {city}\n"
            "‚Äî ‚Äî ‚Äî\n"
        )
    await update.message.reply_text(msg, parse_mode="HTML")
    await update.message.reply_text(MAIN_MENU_TEXT)
    return ConversationHandler.END


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏ /salary, /grade, /skills –∏–ª–∏ /analyze –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Ä—ã–Ω–∫—É —Ç—Ä—É–¥–∞.\n"
        "/salary ‚Äî –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –ø–æ –ª—é–±–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.\n" 
        "–ü–æ–¥—Ö–æ–¥–∏—Ç –∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º, –∏ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è–º: –º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å ‚Äú–∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å‚Äù –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ —Ä—ã–Ω–∫–µ.\n"
        
    )

def main():

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_salary = ConversationHandler(
        entry_points=[CommandHandler("salary", salary_start)],
        states={
            SALARY_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, salary_get_city)],
            SALARY_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, salary_get_skills)],
            SALARY_SKILLS: [MessageHandler(filters.TEXT & ~filters.COMMAND, salary_get_grade)],
            SALARY_GRADE: [MessageHandler(filters.TEXT & ~filters.COMMAND, salary_finish)],
        },
        fallbacks=[CommandHandler("cancel", lambda update, context: update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."))]
    )

    conv_skills = ConversationHandler(
       entry_points=[CommandHandler("skills", skills_start)],
        states={
            SKILLS_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, skills_get_city)],
            SKILLS_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, skills_get_grade)],
            SKILLS_GRADE: [MessageHandler(filters.TEXT & ~filters.COMMAND, skills_finish)],
        },
            fallbacks=[CommandHandler("cancel", lambda update, context: update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."))]
    )

    conv_topjobs = ConversationHandler(
        entry_points=[CommandHandler("top", top_start)],
        states={
            TOP_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, top_get_title)],
            TOP_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, top_get_grade)],
            TOP_GRADE: [MessageHandler(filters.TEXT & ~filters.COMMAND, top_finish)],
        },
        fallbacks=[CommandHandler("cancel", lambda update, context: update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."))]
    )

    conv_grade = ConversationHandler(
        entry_points=[CommandHandler("grade", grade_start)],
        states={
            GRADE_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, grade_get_city)],
            GRADE_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, grade_get_skills)],
            GRADE_SKILLS: [MessageHandler(filters.TEXT & ~filters.COMMAND, grade_finish)],
        },
        fallbacks=[CommandHandler("cancel", lambda update, context: update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."))]
    )

    # –î–æ–±–∞–≤–∏—Ç—å handler:
    conv_nextskills = ConversationHandler(
        entry_points=[CommandHandler("nextskills", nextskills_start)],
        states={
            NEXTSKILLS_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, nextskills_get_city)],
            NEXTSKILLS_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, nextskills_get_from)],
            NEXTSKILLS_FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, nextskills_get_to)],
            NEXTSKILLS_TO: [MessageHandler(filters.TEXT & ~filters.COMMAND, nextskills_finish)],
        },
        fallbacks=[CommandHandler("cancel", lambda update, context: update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."))]
    )
    conv_analyze = ConversationHandler(
        entry_points=[CommandHandler("analyze", analyze_start)],
        states={
            ANALYZE_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_get_city)],
            ANALYZE_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_get_skills)],
            ANALYZE_SKILLS: [MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_get_salary)],
            ANALYZE_SALARY: [MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_finish)],
        },
        fallbacks=[CommandHandler("cancel", lambda update, context: update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."))]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(conv_salary)
    app.add_handler(conv_skills)
    app.add_handler(conv_analyze)
    app.add_handler(conv_topjobs)
    app.add_handler(conv_grade)
    app.add_handler(conv_nextskills)


    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
